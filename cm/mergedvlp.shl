#!/bin/bash
#***********************************************************************
#
#  University of South Florida
#  Student Information System
#  Program Unit Information
#
#  General Information
#  -------------------
#  Shell Script Name  : mergedvlp
#  Process Associated : git
#  Object Source File Location and Name : z:\github\cm\mergedvlp.shl
#  Business Logic : 
#   Explain business logic here.
#
#
# Audit Trail (in descending date order)
# ------------------------------------  
#      Date         User         Reason For Change
#   ---------       ------     -----------------------
#    9/18/2013       VBANGALO     Initial Creation 
#   
#************************************************************************
. checkoutissue.shl
echo "in mergedvlp cm"
pwd
git checkout ${issue}
echo "creating directory ${issue}"
if [ -d ../${issue} ]; then
  rm -rf ../${issue}
fi

mkdir ../${issue}
chmod 777 ../${issue}
# get all branches with dvlp extention

# get all changes made by this issue
git diff --name-status master | grep ^M | cut -f2 > ../${issue}/${issue}_master.txt
chmod 777 ../${issue}/${issue}_master.txt

for br in `git branch | grep dvlp$ | grep \#`
do
   # check if there are any files that have modified and common in other branches also
   if [ `git diff --name-status  $br..master | grep ^M | cut -f2 | wc -l` -gt 0 ];then
      git diff --name-status  $br ..master | grep ^M | cut -f2  >  ../${issue}/${issue}_branch.txt
      IFS=$'\n'       # make newlines the only separator
      set -f          # disable globbing
      for i in $(cat ../${issue}/${issue}_master.txt); do
        if [ `grep $i ../${issue}/${issue}_branch.txt | wc -l` -gt 0 ];then
          echo " ${br}  $i" >> ../${issue}/${issue}_status.txt
          echo " ${br}  $i"
          read bla
          chmod 777 ../${issue}/${issue}_status.txt
        fi
      done
	  #if [ `grep -Fx -f ../${issue}/${issue}_master.txt ../${issue}/${issue}_branch.txt | wc -l` -gt 0 ];then
	     #echo $br >>  ../${issue}/${issue}_status.txt
         #echo "---------------" >>  ../${issue}/${issue}_status.txt
		 #grep -Fx -f ../${issue}/${issue}_master.txt ../${issue}/${issue}_branch.txt >> ../${issue}/${issue}_status.txt
		 #chmod 777 ../${issue}/${issue}_status.txt
	  #fi
   fi
done 
if [ -f  ../${issue}/${issue}_status.txt ];then
   cat ../${issue}/${issue}_status.txt
   echo "There are some conflicts in this issue as shown above. Are these resolved?"
   read res
   if [ $res == "no" ]; then
   echo " Please check with developers. Ok?"
   read cnflt
   git checkout master
   exit 2
   fi
fi

# first merge branches to local server
git checkout dvlp
git fetch --all
git reset --hard origin/dvlp
git merge -Xtheirs ${issue} > ../${issue}/${issue}.log
check=`cat ../${issue}/${issue}.log|grep -i "failed" |wc -l`
if [ $check -gt 0 ]; then
  git status >> ../${issue}/${issue}.log
  cat ../${issue}/${issue}.log | grep CONFLICT | sed 's/.*conflict in //' > ../${issue}/${issue}_merge.txt
  echo "** before abort file status" >> ../${issue}/${issue}_status.txt
  for i in `cat ../${issue}/${issue}_merge.txt`
  do
    cp $i ../${issue}/.
	echo "" >> ../${issue}/${issue}_status.txt
	echo "**********" >> ../${issue}/${issue}_status.txt
	echo $i >> ../${issue}/${issue}_status.txt
	echo "in dvlp branch" >> ../${issue}/${issue}_status.txt
	echo "--------------" >> ../${issue}/${issue}_status.txt
	git log -1 dvlp  --decorate $i >> ../${issue}/${issue}_status.txt
	echo "in ${issue} branch" >> ../${issue}/${issue}_status.txt
	echo "---------------------" >> ../${issue}/${issue}_status.txt
	git log -1 ${issue}  --decorate $i >> ../${issue}/${issue}_status.txt

	#git log -2 --all --decorate $i >> ../${issue}/${issue}_status.txt
	
  done
  git merge --abort
  git checkout master
  git status
  echo "could not be merged. Please check with developer. Make sure branch is on master. Ok?"
  read bla
else
  echo "creating branch issue.dvlp"
  git branch -m ${issue} ${issue}.dvlp
  git checkout ${issue}.dvlp
  git branch -d ${issue}
  echo "pushing branch issue.dvlp"
  git checkout ${issue}.dvlp
  git push origin ${issue}.dvlp
   echo "pushing branch delete issue"
  git status
  git push origin --delete ${issue}
  git status
  
  git push origin dvlp
  stat=$?
  echo "status is ${stat}"
  if [ $stat -eq 0 ]; then
    echo "pushing to remote server"
    git push ${rmtSrv}/${reposit}.git ${issue}.dvlp
    git push ${rmtSrv}/${reposit}.git dvlp
    git push ${rmtSrv}/${reposit}.git --delete ${issue}
    echo `pwd`
    ## change developer privileges to issue.dvlp. This will stop develpoer accidentally pushing his changes after issue is merged to dvlp.
    
    mysed=`echo "sed -e '/${issue}/ s/^/#/' ${localRep}/${reposit}.git/info/allowed-users"`
    echo $mysed
    eval $mysed  > ${localRep}/${reposit}.git/info/tmp.txt
    cat ${localRep}/${reposit}.git/info/tmp.txt > ${localRep}/${reposit}.git/info/allowed-users
    chmod 777 ${localRep}/${reposit}.git/info/allowed-users
    rm -r -f ${localRep}/${reposit}.git/info/tmp.txt
    
    cd ../${reposit}
  else 
    echo "could not push to local server and hence not pushing to remote"
  fi
fi  
git checkout master
#!/bin/bash
#***********************************************************************
#
#  University of South Florida
#  Student Information System
#  Program Unit Information
#
#  General Information
#  -------------------
#  Shell Script Name  : mergedvlp
#  Process Associated : git
#  Object Source File Location and Name : z:\github\cm\mergedvlp.shl
#  Business Logic : 
#   Explain business logic here.
#
#
# Audit Trail (in descending date order)
# ------------------------------------  
#      Date         User         Reason For Change
#   ---------       ------     -----------------------
#    9/18/2013       VBANGALO     Initial Creation 
#   
#************************************************************************
. checkoutissue.shl
echo "in mergedvlp cm"
# first merge branches to local server
pwd
git checkout dvlp
git fetch --all
git reset --hard origin/dvlp
echo "creating directory ${issue}"
if [ -d ../${issue} ]; then
  rm -rf ../${issue}
fi

mkdir ../${issue}
git merge ${issue} > ../${issue}/${issue}.log
check=`cat ../${issue}/${issue}.log|grep -i "failed" |wc -l`
if [ $check -gt 0 ]; then
  git status >> ../${issue}/${issue}.log
  cat ../${issue}/${issue}.log | grep CONFLICT | sed 's/.*conflict in //' > ../${issue}/${issue}_merge.txt
  echo "** before abort file status" >> ../${issue}/${issue}_status.txt
  for i in `cat ../${issue}/${issue}_merge.txt`
  do
    cp $i ../${issue}/.
	echo "" >> ../${issue}/${issue}_status.txt
	echo "**********" >> ../${issue}/${issue}_status.txt
	echo $i >> ../${issue}/${issue}_status.txt
	git log -2 --all --decorate $i >> ../${issue}/${issue}_status.txt
	
  done
  git merge --abort
  git checkout master
  git status
  echo "could not be merged. Please check with developer. Make sure branch is on master. Ok?"
  read bla
else
  echo "creating branch issue.dvlp"
  git branch -m ${issue} ${issue}.dvlp
  echo "pushing branch issue.dvlp"
  git checkout ${issue}.dvlp
  git push origin ${issue}.dvlp
   echo "pushing branch delete issue"
  git checkout ${issue}
  git push origin --delete ${issue}
  git push origin dvlp
  stat=$?
  echo "status is ${stat}"
  if [ $stat -eq 0 ]; then
  echo "pushing to remote server"
  git push ${rmtSrv}/${reposit}.git ${issue}.dvlp
  git push ${rmtSrv}/${reposit}.git dvlp
  echo `pwd`
  cd ../${reposit}.wiki
  echo `pwd`
  git pull origin master
  echo " going to push ${rmtSrv}/${reposit}.wiki.git"
  git push ${rmtSrv}/${reposit}.wiki.git master
  cd ../${reposit}
  else 
    echo "could not push to local server and hence not pushing to remote"
  fi
fi  
git checkout master